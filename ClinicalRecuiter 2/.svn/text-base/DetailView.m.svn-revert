//
//  DetailView.m
//  ClinicalRecuiter
//
//  Created by Hirak on 12/2/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "DetailView.h"
#import "JSON.h"
#import "NSDataAdditions.h"
#import "AlertHandler.h"

static const CGFloat MINIMUM_SCROLL_FRACTION = 0.2;
static const CGFloat MAXIMUM_SCROLL_FRACTION = 0.8;
static const CGFloat KEYBOARD_ANIMATION_DURATION = 0.3;

@implementation DetailView
@synthesize rcUname,rcName,rcOverview,rcAdd1,rcAdd2,rcAdd3,rcBusinessNo,rcFaxNo,rcContactName,rcEmail1,rcEmail2,rcURL,rcArea,rcMobileNO;
@synthesize scrlView,pkrExpArea,isFromLogin,lblExpArea,picker,btnPhoto,imgPhoto;
@synthesize txtExpAre;

// The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.
/*
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization.
    }
    return self;
}
*/


// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
    [super viewDidLoad];
	self.navigationController.navigationBarHidden=FALSE;
	self.navigationItem.title=@"Profile";
	arrayNo = [[NSMutableArray alloc] initWithObjects:@"Cardiology/Vascular",@"Dental/Maxillofacial",@"Dermatology/Plastic",@"Endocrinology",@"Gastroenterology",@"Hematology",@"Immunology/ID",@"Internal Medicine",@"Musculoskeletal",@"Nephrology/Urology",@"Neurology",@"Ob/Gyn?Oncology",@"Opthalmology",@"Orthopedics",@"Otolaryngology",@"Pediatric/Neonate",@"Pharmacology/Tox",@"Podiatry",@"Psychiatry",@"Pulmonary",@"Rheumatology",@"Sleep Medicine",@"Trauma/Emergency",@"Healthy Patients",nil];                                                                         
	
	pickerView = [[ALPickerView alloc] init];
	pickerView.delegate = self;
	entries = [[NSArray alloc] initWithArray:arrayNo];
	selectionStates = [[NSMutableDictionary alloc] init];
	arr11 = [[NSMutableArray alloc] init];
	
	
	picker = [[UIImagePickerController alloc] init];
	[picker setDelegate:self];
	picker.allowsImageEditing = TRUE;
	
	rightBtn = [[UIBarButtonItem alloc] initWithTitle:@"Edit" style:UIBarButtonItemStyleBordered target:self action:@selector(toggleEditing)];
	rightBtn.possibleTitles = [NSSet setWithObjects:@"Edit",@"Done",nil];
	self.navigationItem.rightBarButtonItem = rightBtn;
	
	BtnLogout = [[UIBarButtonItem alloc] initWithTitle:@"Logout" style:UIBarButtonItemStyleBordered target:self action:@selector(logoutClicked:)];
	self.navigationItem.leftBarButtonItem = BtnLogout;
	
	[researchBtnAdd setHidden:YES];
	scrlView.contentSize=CGSizeMake(320, 1250);
	appDel = (ClinicalRecuiterAppDelegate *)[[UIApplication sharedApplication] delegate];
	
	userID = [appDel.dictUserData valueForKey:@"uid"];
	
	[AlertHandler showAlertForProcess];
	WSPContinuous *wspcontinuous;
	wspcontinuous = [[WSPContinuous alloc] initWithRequestForThread:[webService getURq_getansascreen:[webService getWS_profile:userID]] 
															rootTag:@"Record" 
														startingTag:[NSDictionary dictionaryWithObjectsAndKeys:nil] 
														  endingTag:[NSDictionary dictionaryWithObjectsAndKeys:@"research_center_id",@"research_center_id",@"username",@"username",@"research_center_name",@"research_center_name",@"overview",@"overview",@"center_photo",@"center_photo",@"address1",@"address1",@"address2",@"address2",@"address3",@"address3",@"business_number",@"business_number",@"fax_number",@"fax_number",@"contact_name",@"contact_name",@"contact_email1",@"contact_email1",@"contact_email2",@"contact_email2",@"URL",@"URL",@"expertise_area",@"expertise_area",@"mobile_number",@"mobile_number",@"role",@"role",@"center_status",@"center_status",nil] 
														  otherTags:[NSDictionary dictionaryWithObjectsAndKeys:nil] 
																sel:@selector(finisheParsing:) 
														 andHandler:self];
	
	rcUname.enabled = FALSE;
	rcName.enabled=FALSE;
	rcOverview.enabled=FALSE;
	rcAdd1.enabled=FALSE;
	rcAdd2.enabled=FALSE;
	rcAdd3.enabled=FALSE;
	rcContactName.enabled=FALSE;
	rcBusinessNo.enabled=FALSE;
	rcMobileNO.enabled=FALSE;
	rcFaxNo.enabled=FALSE;
	rcEmail1.enabled=FALSE;
	rcEmail2.enabled=FALSE;
	rcURL.enabled=FALSE;
	btnAreaExp.enabled=FALSE;
	txtExpAre.editable=FALSE;
	btnPhoto.enabled=FALSE;
}

-(void)finisheParsing:(NSDictionary*)dictionary
{
	[AlertHandler hideAlert];
	NSLog(@"%@",dictionary);
	
	NSString *usename = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"username"];
	NSString *rcname  = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"research_center_name"];
	NSString *over    = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"overview"];
	NSString *add1    = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"address1"];
	NSString *add2    = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"address2"];
	NSString *add3    = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"address3"];
	NSString *contact = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"contact_name"];
	NSString *bsnsNum = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"business_number"];
	NSString *mobNum  = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"mobile_number"];
	NSString *faxNum  = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"fax_number"];
	NSString *emai1   = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"contact_email1"];
	NSString *emai2   = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"contact_email2"];
	NSString *strURL  = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"URL"];
	
	NSString *photoURL = [[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"center_photo"];
	NSData *imgData = [[NSData alloc] initWithContentsOfURL:[NSURL URLWithString:photoURL]];
	UIImage *img = [[UIImage alloc] initWithData:imgData];
	[imgPhoto setImage:img];
	
	
	NSString *countexpAre =[[[dictionary valueForKey:@"array"] objectAtIndex:0] valueForKey:@"expertise_area"];
	NSArray *selecArr = [countexpAre componentsSeparatedByString:@","];
	
	
	
	for (NSString *key in entries)
		[selectionStates setObject:[NSNumber numberWithBool:NO] forKey:key];
	
	
	for (NSString *abc in entries) {
		for (int i = 0; i<[selecArr count]; i++) {
			
			
			[selectionStates setObject:[NSNumber numberWithBool:YES] forKey:[arrayNo objectAtIndex:[[selecArr objectAtIndex:i]intValue]-1]];
		}
	}
	
	
	NSMutableArray *oldSelected = [[NSMutableArray alloc] init];
	for (int j=0; j<[selecArr count]; j++)
	{
		[oldSelected addObject:[arrayNo objectAtIndex:[[selecArr objectAtIndex:j]intValue]-1]];
	}
	NSLog(@"%@",oldSelected);
	NSString *strOldEntry =@"";
	
	for (int i=0; i<[oldSelected count]; i++)
	{
		if (i==[oldSelected count]-1)
		{
			strOldEntry = [strOldEntry stringByAppendingString:[NSString stringWithFormat:@"%@",[oldSelected objectAtIndex:i]]];
		}
		else
		{
			strOldEntry = [strOldEntry stringByAppendingString:[NSString stringWithFormat:@"%@,",[oldSelected objectAtIndex:i]]];
		}
	}
	NSLog(@"%@",strOldEntry);
	
	txtExpAre.text = strOldEntry;
	
	if ([countexpAre isEqualToString:@"(null)"])
	{
		txtExpAre.hidden=TRUE;
		btnAreaExp.hidden=TRUE;
		lblExpArea.hidden=TRUE;
	}
	else {
		txtExpAre.hidden=FALSE;
		btnAreaExp.hidden=FALSE;
		lblExpArea.hidden=FALSE;
	}

	
	rcUname.text = usename;
	rcName.text=rcname;
	rcOverview.text=over;
	rcAdd1.text=add1;
	rcAdd2.text=add2;
	rcAdd3.text=add3;
	rcContactName.text=contact;
	rcBusinessNo.text=bsnsNum;
	rcMobileNO.text=mobNum;
	rcFaxNo.text=faxNum;
	rcEmail1.text=emai1;
	rcEmail2.text=emai2;
	rcURL.text=strURL;
	
	//NSString *expAre = [[NSString alloc] initWithFormat:@"%@",[arrayNo objectAtIndex:countexpAre]];
	
	//[btnAreaExp setTitle:expAre forState:UIControlStateNormal];
}

- (void)toggleEditing
{
	if (isEdit)
	{
		isEdit = NO;
		self.navigationItem.rightBarButtonItem.title = @"Done";
		
		rcName.enabled=TRUE;
		rcOverview.enabled=TRUE;
		rcAdd1.enabled=TRUE;
		rcAdd2.enabled=TRUE;
		rcAdd3.enabled=TRUE;
		rcContactName.enabled=TRUE;
		rcBusinessNo.enabled=TRUE;
		rcMobileNO.enabled=TRUE;
		rcFaxNo.enabled=TRUE;
		rcEmail1.enabled=TRUE;
		rcEmail2.enabled=TRUE;
		rcURL.enabled=TRUE;
		btnAreaExp.enabled=TRUE;
		txtExpAre.editable=TRUE;
		btnPhoto.enabled=TRUE;
		[researchBtnAdd setHidden:NO];
	}
	else 
	{
		isEdit = YES;
		self.navigationItem.rightBarButtonItem.title = @"Edit";
		rcUname.enabled = FALSE;
		rcName.enabled=FALSE;
		rcOverview.enabled=FALSE;
		rcAdd1.enabled=FALSE;
		rcAdd2.enabled=FALSE;
		rcAdd3.enabled=FALSE;
		rcContactName.enabled=FALSE;
		rcBusinessNo.enabled=FALSE;
		rcMobileNO.enabled=FALSE;
		rcFaxNo.enabled=FALSE;
		rcEmail1.enabled=FALSE;
		rcEmail2.enabled=FALSE;
		rcURL.enabled=FALSE;
		btnAreaExp.enabled=FALSE;
		txtExpAre.editable=FALSE;
		btnPhoto.enabled=FALSE;
		[researchBtnAdd setHidden:YES];
	}
}
-(IBAction)logoutClicked :(id)sender
{
	if (isFromLogin==TRUE)
	{
		[self dismissModalViewControllerAnimated:YES];
	}
	else
	{
		[self.navigationController popToRootViewControllerAnimated:YES];
	}
}
-(IBAction)expAreaClicked:(id)sender
{	
	pkrExpArea = [[UIPickerView alloc] init];
	pkrExpArea.delegate=self;
	pkrExpArea.dataSource=self;
	[pkrExpArea setShowsSelectionIndicator:YES];
	[pkrExpArea selectRow:1 inComponent:0 animated:NO];
	[pkrExpArea setTag:1];
	
	UIActionSheet *ExpArea = [[UIActionSheet alloc] initWithTitle:@"Pickup Time\n\n\n\n\n\n\n\n\n\n\n\n" delegate:self cancelButtonTitle:@"Cancel" destructiveButtonTitle:@"Set" otherButtonTitles:nil];
	ExpArea.actionSheetStyle = UIActionSheetStyleBlackOpaque;
	[ExpArea setBounds:CGRectMake(0, 0, 320, 250)];
	ExpArea.tag=1;
	[ExpArea addSubview:pickerView];
	[ExpArea showInView:self.view];
	[pkrExpArea reloadAllComponents];
}
-(IBAction)photoClicked: (id)sender
{
	UIActionSheet *photoAction = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:@"Cancel" destructiveButtonTitle:nil otherButtonTitles:@"Take Photo",@"Choose from Galery",nil];
	[photoAction showInView:self.view];
	photoAction.tag=2;
}

- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
	if (actionSheet.tag==1)
	{
		if (buttonIndex==0)
		{
			NSMutableArray *myseleEntry =[[NSMutableArray  alloc]init];
			for (int i=0; i <[entries count]; i++)
			{
				NSString *myc_str =[entries objectAtIndex:i];
				for(NSString *s in arr11){
					if([s isEqualToString:myc_str])
						[myseleEntry addObject:[NSString stringWithFormat:@"%d",i+1]];
				}
			}
			
			NSLog(@"%@",myseleEntry);
			NSString *str =@"";
			for (int i=0; i<[myseleEntry count]; i++)
			{
				if (i==[myseleEntry count]-1)
				{
					str = [str stringByAppendingString:[NSString stringWithFormat:@"%@",[myseleEntry objectAtIndex:i]]];
				}
				else
				{
					str = [str stringByAppendingString:[NSString stringWithFormat:@"%@,",[myseleEntry objectAtIndex:i]]];
				}
			}
			countExpAre=[str copy];
			NSLog(@"%@",countExpAre);
			
			////
			NSMutableArray *newSelected = [[NSMutableArray alloc] init];
			for (int j=0; j<[myseleEntry count]; j++)
			{
				[newSelected addObject:[arrayNo objectAtIndex:[[myseleEntry objectAtIndex:j]intValue]]];
			}
			NSLog(@"%@",newSelected);
			NSString *strNewEntry =@"";
			
			for (int i=0; i<[newSelected count]; i++)
			{
				if (i==[newSelected count]-1)
				{
					strNewEntry = [strNewEntry stringByAppendingString:[NSString stringWithFormat:@"%@",[newSelected objectAtIndex:i]]];
				}
				else
				{
					strNewEntry = [strNewEntry stringByAppendingString:[NSString stringWithFormat:@"%@,",[newSelected objectAtIndex:i]]];
				}
			}
			NSLog(@"%@",strNewEntry);
			
			txtExpAre.text = strNewEntry;
			////
		}
	}
	else if (actionSheet.tag==2)
	{
		if (buttonIndex==0)
		{
			picker.sourceType = UIImagePickerControllerSourceTypeCamera;
			[self presentModalViewController:picker animated:YES];
		}
		else if (buttonIndex==1)
		{
			picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
			[self presentModalViewController:picker animated:YES];
		}
	}
}

- (BOOL)textViewShouldBeginEditing:(UITextView *)textView
{
	[textView resignFirstResponder];
	[self performSelector:@selector(expAreaClicked:)];
	return NO;
}
- (void)textViewDidBeginEditing:(UITextView *)textView
{
	[textView resignFirstResponder];
}



- (void)imagePickerController:(UIImagePickerController *)pickers didFinishPickingMediaWithInfo:(NSDictionary *)info
{	
    [picker dismissModalViewControllerAnimated:YES];
    UIImage *img = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
    
	imgPhoto.image=img;
	
	NSData *imgData =UIImageJPEGRepresentation(img, 0.45);
	strImg = [[imgData base64Encoding] retain];
}

#pragma mark -
#pragma mark ALPickerView delegate methods

- (NSInteger)numberOfRowsForPickerView:(ALPickerView *)pickerView {
	return [entries count];
}

- (NSString *)pickerView:(ALPickerView *)pickerView textForRow:(NSInteger)row {
	return [entries objectAtIndex:row];
}

- (BOOL)pickerView:(ALPickerView *)pickerView selectionStateForRow:(NSInteger)row {
	
	for (NSString *key in entries)
    {
        NSString *st = [NSString stringWithFormat:@"%@",[selectionStates objectForKey:key]];
	
        if([st isEqualToString:@"1"])
		{
			if(![arr11 containsObject:key])
                [arr11 addObject:key];
		}
        
        if([st isEqualToString:@"0"])
        {
            if([arr11 containsObject:key])
                [arr11 removeObject:key];
        }
		
    }
	return [[selectionStates objectForKey:[entries objectAtIndex:row]] boolValue];
}

- (void)pickerView:(ALPickerView *)pickerView didCheckRow:(NSInteger)row {
	// Check whether all rows are checked or only one
	if (row == -1)
		for (id key in [selectionStates allKeys])
			[selectionStates setObject:[NSNumber numberWithBool:YES] forKey:key];
	else
		[selectionStates setObject:[NSNumber numberWithBool:YES] forKey:[entries objectAtIndex:row]];
	
}
- (void)pickerView:(ALPickerView *)pickerView didUncheckRow:(NSInteger)row {
	// Check whether all rows are unchecked or only one
	if (row == -1)
		for (id key in [selectionStates allKeys])
			[selectionStates setObject:[NSNumber numberWithBool:NO] forKey:key];
	else
		[selectionStates setObject:[NSNumber numberWithBool:NO] forKey:[entries objectAtIndex:row]];
}

#pragma mark -
#pragma mark Picker Methods


- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView;
{
    return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component;
{
	NSLog(@"%d",[arrayNo count]);
    return [arrayNo count];
}

- (NSString *)pickerView:(UIPickerView *)pickerView1 titleForRow:(NSInteger)row forComponent:(NSInteger)component;
{
	if (pickerView1.tag==1)
	{
		return [arrayNo objectAtIndex:row];
	}
	return nil;
}

- (void)pickerView:(UIPickerView *)pickerView1 didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
	if (pickerView1.tag==1)
	{
		strExpArea = [[NSString alloc] initWithFormat:@"%@",[arrayNo objectAtIndex:row]];
		countExpAre = [[NSString alloc] initWithFormat:@"%d",row];
	}
}

//-(IBAction)researchCancelclicked:(id)sender
//{
//	[researchBtnAdd setHidden:YES];
//}
-(IBAction)researchAddClicked:(id)sender
{
	[AlertHandler showAlertForProcess];
	NSString *photoName = [[NSString alloc] initWithFormat:@"%@.jpg",rcUname.text];
	NSString *c11 = (NSString *) CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)strImg, NULL, CFSTR(":/?#[]@!$&’()*+,;="), kCFStringEncodingUTF8);
	
	NSString *post =[NSString stringWithFormat:@"id=%@&research_center_name=%@&overview=%@&address1=%@&address2=%@&address3=%@&business_number=%@&fax_number=%@&contact_name=%@&contact_email1=%@&contact_email2=%@&URL=%@&expertise_area=%@&mobile_number=%@&center_photo_code=%@&center_photo=%@",userID,rcName.text,rcOverview.text,rcAdd1.text,rcAdd2.text,rcAdd3.text,rcBusinessNo.text,rcFaxNo.text,rcContactName.text,rcEmail1.text,rcEmail2.text,rcURL.text,countExpAre,rcMobileNO.text,c11,photoName];
    
    NSData *postData = [post dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];
    
    NSString *postLength = [NSString stringWithFormat:@"%d", [postData length]];
    
    NSMutableURLRequest *request = [[[NSMutableURLRequest alloc] init] autorelease];
    [request setURL:[NSURL URLWithString:@"http://www.openxcellaus.info/clinical/update.php"]];
    [request setHTTPMethod:@"POST"];
	[request setValue:postLength forHTTPHeaderField:@"Content-Length"];
    [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
    [request setHTTPBody:postData];
    
    NSError *error;
    NSURLResponse *response;
    NSData *uData=[NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString *data=[[NSString alloc]initWithData:uData encoding:NSUTF8StringEncoding];
	
	NSMutableDictionary *temp = [data JSONValue];
	[AlertHandler hideAlert];
	NSString *msg = [[NSString alloc] initWithFormat:@"%@",[temp valueForKey:@"msg"]];
	
	UIAlertView *alert = [[UIAlertView alloc] initWithTitle:msg message:@"" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
	[alert show];
	[alert release];
}
-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
	[rcUname resignFirstResponder];
	[rcName resignFirstResponder];
	[rcOverview resignFirstResponder];
	[rcAdd1 resignFirstResponder];
	[rcAdd2 resignFirstResponder];
    [rcAdd3 resignFirstResponder];
	[rcBusinessNo resignFirstResponder];
	[rcFaxNo resignFirstResponder];
	[rcContactName resignFirstResponder];
	[rcEmail1 resignFirstResponder];
	[rcEmail2 resignFirstResponder];
	[rcURL resignFirstResponder];
    [rcArea resignFirstResponder];
	[rcMobileNO resignFirstResponder];
}
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
	[textField resignFirstResponder];
	return YES;
}
- (void)textFieldDidBeginEditing:(UITextField *)textField
{
	CGRect textFieldRect =[self.view.window convertRect:textField.bounds fromView:textField];
	CGRect viewRect =[self.view.window convertRect:self.view.bounds fromView:self.view];
	
	CGFloat midline = textFieldRect.origin.y +1.0 * textFieldRect.size.height;
	CGFloat numerator =midline - viewRect.origin.y- MINIMUM_SCROLL_FRACTION * viewRect.size.height;
	CGFloat denominator =(MAXIMUM_SCROLL_FRACTION - MINIMUM_SCROLL_FRACTION)* viewRect.size.height;
	CGFloat heightFraction = numerator / denominator;
	
	animatedDistance = floor(162.0 * heightFraction);
	
	CGRect viewFrame =scrlView.frame;
	
	viewFrame.origin.y -= animatedDistance;
	
	[UIScrollView beginAnimations:nil context:NULL];
	[UIScrollView setAnimationBeginsFromCurrentState:YES];
	[UIScrollView setAnimationDuration:KEYBOARD_ANIMATION_DURATION];
	
	[self.scrlView setFrame:viewFrame];
	[UIScrollView commitAnimations];
}
- (void)textFieldDidEndEditing:(UITextField *)textField
{
	CGRect viewFrame = scrlView.frame;
	//self.view.frame;
	viewFrame.origin.y += animatedDistance;
	
	[UIScrollView beginAnimations:nil context:NULL];
	[UIScrollView setAnimationBeginsFromCurrentState:YES];
	[UIScrollView setAnimationDuration:KEYBOARD_ANIMATION_DURATION];
	
	[self.scrlView setFrame:viewFrame];
	
	[UIScrollView commitAnimations];
}
/*
// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations.
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}
*/

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc. that aren't in use.
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}


- (void)dealloc {
    [super dealloc];
}


@end
